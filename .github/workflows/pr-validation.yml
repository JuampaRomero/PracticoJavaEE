name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Validación de título y descripción del PR
  pr-lint:
    name: PR Standards Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Check PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
          revert
    
    - name: Check PR size
      uses: CodelyTV/pr-size-labeler@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        xs_label: 'size/xs'
        xs_max_size: 10
        s_label: 'size/s'
        s_max_size: 100
        m_label: 'size/m'
        m_max_size: 500
        l_label: 'size/l'
        l_max_size: 1000
        xl_label: 'size/xl'

  # Análisis de código
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Check code formatting
      run: |
        echo "🎨 Checking code formatting..."
        # Aquí puedes agregar checkstyle o spotless
    
    - name: Find potential bugs
      run: |
        echo "🐛 Looking for potential bugs..."
        # Aquí puedes agregar SpotBugs o PMD

  # Preview del build
  build-preview:
    name: Build Preview
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build without tests
      run: mvn clean compile
    
    - name: Comment PR
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Build Preview')
          });
          
          const body = `## 🔍 Build Preview
          
          - **Build Status**: ${{ job.status }} 
          - **Branch**: \`${{ github.head_ref }}\`
          - **Commit**: \`${{ github.event.pull_request.head.sha }}\`
          
          ### Next Steps:
          1. ✅ Tests will run automatically
          2. 👀 Request review from team members
          3. 🚀 Merge when all checks pass`;
          
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body
            });
          } else {
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
          }
