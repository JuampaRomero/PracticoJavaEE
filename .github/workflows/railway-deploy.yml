name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Job 1: Análisis de código y tests
  test-and-quality:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Para SonarCloud
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Run tests with coverage
      run: |
        mvn clean test jacoco:report
        echo "Test coverage report generated"
    
    - name: Build WAR
      run: mvn clean package -DskipTests
    
    - name: Upload WAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: war-artifact
        path: target/*.war
        retention-days: 7
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: target/surefire-reports/
        retention-days: 7

  # Job 2: Validación de seguridad
  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-and-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        echo "🔒 Running security checks..."
        # Aquí podrías agregar herramientas como:
        # - OWASP Dependency Check
        # - Snyk
        # - GitGuardian
    
  # Job 3: Deploy a Railway (solo en main/master)
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test-and-quality, security-check]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      github.repository == 'JuampaRomero/PracticoJavaEE'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Notify Railway
      run: |
        echo "🚂 Railway will automatically detect this push and deploy"
        echo "📍 Branch: ${{ github.ref_name }}"
        echo "🔨 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        echo "💬 Message: ${{ github.event.head_commit.message }}"
    
    # Railway auto-deploys, pero podemos verificar el estado si configuramos el token
    - name: Check Railway deployment status
      if: env.RAILWAY_TOKEN != ''
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        npm install -g @railway/cli
        railway status || echo "Railway CLI not configured"

  # Job 4: Notificación de resultados
  notify:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [test-and-quality, security-check, deploy-railway]
    if: always()
    
    steps:
    - name: Create deployment summary
      run: |
        echo "## 📊 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.test-and-quality.result }}" == "success" ]; then
          echo "✅ Tests passed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Security Check" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.security-check.result }}" == "success" ]; then
          echo "✅ Security checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security checks need attention" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.deploy-railway.result }}" == "success" ]; then
          echo "✅ Deployment triggered successfully" >> $GITHUB_STEP_SUMMARY
          echo "🚂 Railway is deploying the application" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-railway.result }}" == "skipped" ]; then
          echo "⏭️ Deployment skipped (not on main branch)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
